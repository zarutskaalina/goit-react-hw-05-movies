{"version":3,"file":"static/js/186.0d0c873a.chunk.js","mappings":"yNA6CA,UAzCgB,SAAHA,GAAqB,IAAfC,EAAOD,EAAPC,QACjBC,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAoBtB,OAlBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEE,OAFFF,EAAAC,KAAA,EAEjBd,GAAa,GAAMa,EAAAE,KAAA,EACIC,EAAAA,EAAAA,IAAU,sCAADC,OACQ3B,EAAO,6EAC7C,KAAD,EAAAqB,EAAAE,EAAAK,KAFON,EAAID,EAAJC,KAGRhB,EAAWgB,EAAKO,SAASN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAEzBT,EAASS,EAAAO,GAAMC,SAAS,QAEJ,OAFIR,EAAAC,KAAA,GAExBd,GAAa,GAAOa,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAb,EAAA,wBAEvB,kBAZiB,OAAAH,EAAAiB,MAAA,KAAAC,UAAA,KAclBnB,GACF,GAAG,CAAChB,KAGFoC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG5B,IAAa6B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACX,MAAT1B,IAAiBuB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,4BAA0BxB,EAAM,OACpDR,EAAQmC,KAAI,SAAAC,GAAM,OACjBL,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,WAASI,EAAOC,UACC,KAAnBD,EAAOE,SACNL,EAAAA,EAAAA,KAAA,KAAAD,SAAII,EAAOE,WAEXL,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mCALGI,EAAOG,GAOX,MAId,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Loader } from '../Loader/Loader';\n\nconst Reviews = ({ movieId }) => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const { data } = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}}/reviews?language=en-US&page=1&api_key=a98bc7353de84626309d54158846e0b4`\n        );\n        setReviews(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error != null && <p>Sorry, an error occurred {error}!</p>}\n      {reviews.map(review => (\n        <div key={review.id}>\n          <p>Author: {review.author}</p>\n          {review.content !== '' ? (\n            <p>{review.content}</p>\n          ) : (\n            <p>Sorry, there are no reviews!</p>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["_ref","movieId","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchReviews","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","axios","concat","sent","results","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","map","review","author","content","id"],"sourceRoot":""}