{"version":3,"file":"static/js/247.f871f29b.chunk.js","mappings":"yNAoDA,UAhDa,SAAHA,GAAqB,IAAfC,EAAOD,EAAPC,QACdC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEK,OAFLF,EAAAC,KAAA,EAEdd,GAAa,GAAMa,EAAAE,KAAA,EACIC,EAAAA,EAAAA,IAAU,sCAADC,OACQ3B,EAAO,qEAC7C,KAAD,EAAAqB,EAAAE,EAAAK,KAFON,EAAID,EAAJC,KAIRhB,EAAYgB,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAElBT,EAASS,EAAAM,GAAMC,SAAS,QAEJ,OAFIP,EAAAC,KAAA,GAExBd,GAAa,GAAOa,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEvB,kBAbc,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAeflB,GACF,GAAG,CAAChB,KAGFmC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG3B,IAAa4B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACX,MAATzB,IAAiBsB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,4BAA0BvB,EAAM,OACpDR,EAASkC,MACRlC,EAASkC,KAAKC,KAAI,SAAAC,GAAK,OACrBN,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEK,IAAG,mCAAAf,OAAqCc,EAAME,cAC9CC,IAAKH,EAAMI,KACXC,MAAO,IACPC,OAAQ,OAGVZ,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGK,EAAMI,MACPV,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYK,EAAMO,kBAVfP,EAAMQ,GAYV,MAIhB,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = ({ movieId }) => {\n  const [castList, setCastList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        const { data } = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=a98bc7353de84626309d54158846e0b4`\n        );\n\n        setCastList(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error != null && <p>Sorry, an error occurred {error}!</p>}\n      {castList.cast &&\n        castList.cast.map(actor => (\n          <div key={actor.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n              alt={actor.name}\n              width={100}\n              height={150}\n            />\n\n            <li>\n              {actor.name}\n              <p>Character: {actor.character}</p>\n            </li>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["_ref","movieId","_useState","useState","_useState2","_slicedToArray","castList","setCastList","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchCast","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","axios","concat","sent","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","cast","map","actor","src","profile_path","alt","name","width","height","character","id"],"sourceRoot":""}